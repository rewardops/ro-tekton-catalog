apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mx-build-task
spec:
  params:
    - name: APP_NAME
      type: string
    - name: NPM_TOKEN
      type: string
    - name: CLIENT_NAME
      type: string
  stepTemplate:
    env:
      - name: NPM_CONFIG_USERCONFIG
        value: /tekton/home/npm/.npmrc
      - name: HOME
        value: /tekton/home
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 1000Mi
    workingDir: /workspace/source
  steps:
    # https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/git-clone/git-clone-pr.yaml
    - name: ''
      image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone-pr.yaml@versionStream

    # https://github.com/jenkins-x/jx (1 of 3 artifacts)
    - name: jx-variables
      image: ghcr.io/jenkins-x/jx-boot:3.10.86
        #script: |
        #  #!/usr/bin/env sh
        #  jx gitops variables 
        #  jx gitops pr variables


        #echo "export PROGRAM_NAME=$params.APP_NAME" >> /workspace/source/.jx/variables.sh
        #echo "export CLIENT_NAME=$(echo params.CLIENT_NAME)" >> /workspace/source/.jx/variables.sh

        #if [ -n "$(params.CLIENT_NAME)" ]; then
        #  sed -i 's/^export APP_NAME=.*/export APP_NAME="$(params.CLIENT_NAME)-$(params.APP_NAME)"/' /workspace/source/.jx/variables.sh
        #else
        #  sed -i 's/^export APP_NAME=.*/export APP_NAME="$(params.APP_NAME)"/' /workspace/source/.jx/variables.sh
        #fi

    - name: apply-secret
      image: bitnami/kubectl:latest
      script: |
        exit
        # echo "
        # apiVersion: 'kubernetes-client.io/v1'
        # kind: ExternalSecret
        # metadata:
        #   name: build-$(params.APP_NAME)
        # spec:
        #   backendType: vault
        #   vaultMountPoint: 'kubernetes'
        #   vaultRole: 'jx-vault'
        #   dataFrom:
        #     - 'io/data/rewardops/jx/preview/$(params.APP_NAME)'
        # " | kubectl apply -f -

    - name: apply-secret-stg
      image: bitnami/kubectl:latest
      script: |
        exit
        # echo "
        # apiVersion: 'kubernetes-client.io/v1'
        # kind: ExternalSecret
        # metadata:
        #   name: build-$(params.APP_NAME)
        # spec:
        #   backendType: vault
        #   vaultMountPoint: 'kubernetes'
        #   vaultRole: 'jx-vault'
        #   dataFrom:
        #     - 'io/data/rewardops/jx/staging/$(params.APP_NAME)'
        # " | kubectl apply -f -

    # https://github.com/jenkins-x-plugins/jx-registry
    - name: jx-registry
      image: ghcr.io/jenkins-x/jx-registry:0.1.10
      env:
        - name: CACHE_SUFFIX
          value: '/cache'
        - name: ECR_LIFECYCLE_POLICY
          value: |-
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Expire images older than 14 days",
                  "selection": {
                    "tagStatus": "tagged",
                    "countType": "sinceImagePushed",
                    "tagPrefixList": ["0.0.0-"],
                    "countUnit": "days",
                    "countNumber": 14
                  },
                  "action": {
                    "type": "expire"
                  }
                }
              ]
            }
      script: |
        #!/usr/bin/env sh
        jx-registry create --app rewardops/mx-$(params.APP_NAME)
        jx-registry create --app rewardops/cache-mx-$(params.APP_NAME)

    # https://github.com/GoogleContainerTools/kaniko
    - name: build-and-push-docker
      image: gcr.io/kaniko-project/executor:v1.12.1-debug
      env:
        - name: NPM_TOKEN
          valueFrom:
            secretKeyRef:
              name: build-$(params.APP_NAME)
              key: 'NPM_TOKEN'
      envFrom:
        - secretRef:
            name: build-$(params.APP_NAME)
      resources:
        requests:
          cpu: 500m
          memory: 1000Mi
        limits:
          cpu: 2000m
          memory: 4000Mi
      script: |
        #!/bin/sh
        source .jx/variables.sh
        #echo "CLIENT_NAME = $CLIENT_NAME"
        #echo "PROGRAM_NAME = $PROGRAM_NAME"
        #echo "APP_NAME = $APP_NAME"
        #echo "VERSION = $VERSION"

        cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json

        ## Loop through environment variables and write them to a file
        #printenv | while IFS='=' read -r name value; do
        #    # Check if the variable should be replaced as the URL, and the value is empty
        #    if { [[ $name == "NEXT_PUBLIC_URL" ]] || [[ $name == "NEXTAUTH_URL" ]]; } && [[ -z $value ]]; then
        #        # If the name matches and the value is empty, replace the value
        #        value="https://mx-$(params.APP_NAME)-pr${PULL_NUMBER}.jx.rewardops.io"
        #    fi
        #    # Print each environment variable in the format: key="value"
        #    echo "$name=\"$value\"" >> env_vars_flat.txt
        #done

        #echo ">>> Building PR mx-$(params.APP_NAME)"
        #eval /kaniko/executor \
        #  --skip-unused-stages \
        #  --cache=true \
        #  --cache-repo=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/cache-mx-$(params.APP_NAME) \
        #  --cache-copy-layers \
        #  --cleanup \
        #  --context=/workspace/source \
        #  --dockerfile=apps/$(params.PROGRAM_NAME)/Dockerfile \
        #  --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/mx-$(params.APP_NAME):$VERSION \
        #  --build-arg NPM_TOKEN="$NPM_TOKEN" \
        #  --build-arg ENV_VARS_CONTEXT=env_vars_flat.txt

    # https://github.com/jenkins-x-plugins/jx-preview
    - name: promote-preview
      image: ghcr.io/jenkins-x-plugins/jx-preview:0.1.0
      script: |
        #!/usr/bin/env sh
        source .jx/variables.sh
        jx preview create -f infra/preview/helmfile.yaml --debug --service mx-$(params.APP_NAME)

    # https://github.com/jenkins-x-plugins/jx-changelog
    - name: promote-changelog
      image: ghcr.io/jenkins-x/jx-changelog:0.10.3
      script: |
        #!/usr/bin/env sh
        source .jx/variables.sh

        if [ -d "infra/charts/mx-store" ]; then
        jx gitops yset -p version -v "$SEMVER" -f ./infra/charts/mx-store/Chart.yaml
        jx gitops yset -p appVersion -v "$SEMVER" -f ./infra/charts/mx-store/Chart.yaml
        jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG -f ./infra/charts/mx-store/values.yaml
        jx gitops yset -p 'image.tag' -v "$SEMVER" -f ./infra/charts/mx-store/values.yaml;
        else echo no charts; fi

        git add * || true
        git commit -a -m "chore: release $VERSION" --allow-empty
        git tag -fa $VERSION -m "Release version $VERSION"
        git push --force origin $VERSION

        jx changelog create --version ${VERSION}

    # https://github.com/jenkins-x/jx (1 of 3 artifacts)
    - name: promote-helm-release
      image: ghcr.io/jenkins-x/jx-boot:3.10.86
      script: |
        #!/usr/bin/env sh
        VERSION=$(cat VERSION)
        SEMVER=$(cat /tekton/results/next-version)
        cp /tekton/results/next-version VERSION
        sed -i "s/$VERSION/$SEMVER/" .jx/variables.sh
        source .jx/variables.sh

        # https://jenkins-x.io/v3/develop/reference/jx/gitops/helm/release/
        jx gitops helm release -n mx-$(params.APP_NAME)

    # https://github.com/jenkins-x-plugins/jx-promote
    - name: promote-jx-promote
      image: ghcr.io/jenkins-x-plugins/jx-promote:0.6.5
      script: |
        #!/usr/bin/env sh
        source .jx/variables.sh
        jx promote -a mx-$(params.APP_NAME) -b --timeout 1h --no-poll --env staging
        # jx promote -a mx-$(params.APP_NAME) -b --timeout 1h --no-poll --env uat
        # jx promote -a mx-$(params.APP_NAME) -b --timeout 1h --no-poll --env prod-mx-$(params.APP_NAME)
